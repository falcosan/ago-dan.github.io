---
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/global/Footer.astro";
import Hero from "../components/landing/Hero.astro";
import Info from "../components/landing/Info.astro";
import Gift from "../components/landing/Gift.astro";
---

<html lang="en">
  <head>
    <script>
      import { getBrowserLocales } from "../i18n/utils.ts";
      const locale = getBrowserLocales()?.[0];
      const path = `/${locale}`;
      const currentPath = location.pathname;

      if (
        (currentPath !== "/" && path === "/") ||
        (locale != null && !currentPath.startsWith(path))
      ) {
        location.assign(path);
      }

      const drawCanvas = (
        canvasId: string,
        text: string,
        position = 48,
        invertXFlag: boolean = false,
        invertYFlag: boolean = false
      ) => {
        const canvas = document.getElementById(canvasId) as HTMLCanvasElement;
        if (canvas?.getContext) {
          const scale = 1.1;
          const ctx = canvas.getContext("2d");
          if (!ctx) return;

          const canvasWidth = 150 * scale;
          const canvasHeight = 150 * scale;

          canvas.width = canvasWidth;
          canvas.height = canvasHeight;

          const invertX = invertXFlag
            ? (x: number) => canvasWidth - x
            : (x: number) => x;
          const invertY = invertYFlag
            ? (y: number) => canvasHeight - y
            : (y: number) => y;

          ctx.moveTo(invertX(75 * scale), invertY(25 * scale));
          ctx.quadraticCurveTo(
            invertX(25 * scale),
            invertY(25 * scale),
            invertX(25 * scale),
            invertY(62.5 * scale)
          );
          ctx.quadraticCurveTo(
            invertX(25 * scale),
            invertY(100 * scale),
            invertX(50 * scale),
            invertY(100 * scale)
          );
          // ctx.quadraticCurveTo(
          //   invertX(50 * scale),
          //   invertY(120 * scale),
          //   invertX(65 * scale),
          //   invertY(100 * scale)
          // );
          ctx.quadraticCurveTo(
            invertX(125 * scale),
            invertY(100 * scale),
            invertX(125 * scale),
            invertY(62.5 * scale)
          );
          ctx.quadraticCurveTo(
            invertX(125 * scale),
            invertY(25 * scale),
            invertX(75 * scale),
            invertY(25 * scale)
          );
          ctx.font =
            "small-caps bold 30px ui-sans-serif, system-ui, sans-serif";
          ctx.fillStyle = "#95A58D";
          ctx.fill();
          ctx.textAlign = "center";
          ctx.fillStyle = "#FFFFFF";
          ctx.textBaseline = "middle";
          const x = invertX(75 * scale);
          const y = invertY(position * scale);
          const lineheight = 20;
          const splittedText = text.split("\n");
          for (let i = 0; i < splittedText.length; i++) {
            ctx.fillText(splittedText[i], x, y + i * lineheight);
          }
          // ctx.strokeStyle = "#cadbc6";
          // ctx.stroke();
        }
      };

      drawCanvas("marriage", "👰🏻‍♀️🤵🏻‍♂️", 60, true);
      drawCanvas("meet", "💃🏻🕺🏻", 62.5, false, true);
      drawCanvas("clebration", "🍾🎂", 62.5);
    </script>
    <BaseHead />
  </head>

  <body class="bg-olive-500">
    <Hero />
    <Info />
    <Gift />
    <Footer />
  </body>
</html>
